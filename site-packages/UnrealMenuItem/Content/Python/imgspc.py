# Python Toolbar Button & Menu Creator. Copyright 2020 Imaginary Spaces. All Rights Reserved.

import unreal

LEVEL_EDITOR_MAIN_MENU_ID = 'LevelEditor.MainMenu'
LEVEL_EDITOR_TOOLBAR_ID = 'LevelEditor.LevelEditorToolBar'

ICON_STYLE_NAME_SUFFIX = '.Icon'
ICON_SMALL_STYLE_NAME_SUFFIX = '.Small.Icon'

def _log(msg):
    unreal.log("Python Toolbar Button & Menu Creator: {}".format(msg))

def _assign_callback(menu_entry, callback):
    if not callback:
        raise ValueError('No callback function provided for the menu item.')
    
    # Callback provided in the form 'module.callback()'
    callback_module = callback.split('.')[0]

    # Import the necessary module before calling function
    string_command = 'import ' + callback_module + ';' + callback

    menu_entry.set_string_command(unreal.ToolMenuStringCommandType.PYTHON, menu_entry.name, string=string_command)

def _resource_exists(resource_path):
    # Locate the resource file. 
    # Try the project area first
    abs_path = unreal.Paths.combine([unreal.Paths.project_plugins_dir(), resource_path])
    if not unreal.Paths.file_exists(abs_path):
        # Try the engine area
        abs_path = unreal.Paths.combine([unreal.Paths.engine_plugins_dir(), resource_path])
        if not unreal.Paths.file_exists(abs_path):
            # The resource file does not exist
            return False

    return True

def _register_icon_style(icon_path):
    if not icon_path:
        raise ValueError('No path provided to register an icon asset.')

    # Verify that the icon asset exists
    if _resource_exists(icon_path):
        separator = '/'
        path_components = icon_path.split(separator)
        plugin_name = path_components.pop(0)

        # The style set name will be set to the path of the icon asset to ensure uniqueness
        style_set_path = separator.join(path_components)

        # Creation of the icon style set is handled by this plugin's C++ module
        unreal.MenuItemPythonAPI.register_menu_icon(plugin_name, style_set_path)

        icon_style_name = plugin_name + ICON_STYLE_NAME_SUFFIX
        icon_small_style_name = plugin_name + ICON_SMALL_STYLE_NAME_SUFFIX

        return style_set_path, icon_style_name, icon_small_style_name
    else:
        raise Exception(
            'Could not find icon resource file at path: {}. Both the project '
            'and engine Plugins locations were searched'.format(icon_path))

def _make_toolbar_combo_button(menu_id, menu_name, icon_path = None, tooltip = ''):
    if not menu_id or not menu_name:
        raise ValueError('Toolbar button cannot be created without a valid menu name and ID.')

    # Create new Toolbar combo button and add it to the end
    unreal_menus = unreal.ToolMenus.get()
    unreal_menus.register_menu(menu_id)

    if icon_path is not None:
        style_name, icon_style, small_icon_style = _register_icon_style(icon_path) 
        unreal.MenuItemPythonAPI.generate_toolbar_button(menu_id, menu_name, tooltip, style_name, icon_style, small_icon_style) 
    else:
        unreal.MenuItemPythonAPI.generate_toolbar_button(menu_id, menu_name, tooltip)

    return unreal_menus.find_menu(menu_id)

def make_menu_item(menu_path, callback = None, icon_path = None, tooltip = ''):
    ''' 
    Creates or extends an existing toolbar or menu in the Unreal Editor.
    '''
    if not menu_path:
        raise ValueError('The menu path cannot be empty.')

    _log('Creating menu structure {}'.format(menu_path))
    unreal_menus = unreal.ToolMenus.get()
    menu_structure = menu_path.split('/')
    
    # Establish UI component being extended (Editor toolbar by default)
    root_extension_hook = menu_structure.pop(0) if menu_structure[0] == LEVEL_EDITOR_MAIN_MENU_ID else LEVEL_EDITOR_TOOLBAR_ID

    # Find or create parent menu
    parent_menu_name = menu_structure.pop(0)
    parent_menu_id = root_extension_hook + '.' + parent_menu_name  
    parent_menu = unreal_menus.find_menu(parent_menu_id)

    if parent_menu is None:
        _log('Creating parent menu {}'.format(parent_menu_id))

        if root_extension_hook == LEVEL_EDITOR_TOOLBAR_ID:
            parent_menu = _make_toolbar_combo_button(parent_menu_id, parent_menu_name, icon_path, tooltip)
        else:
            main_menu = unreal_menus.find_menu(LEVEL_EDITOR_MAIN_MENU_ID)
            parent_menu = main_menu.add_sub_menu(
                owner = main_menu.get_name(), 
                section_name = parent_menu_name,
                name = parent_menu_name,
                label = parent_menu_name
            )

    # Use remainder of menu_path to create the menu hierarchy 
    if menu_structure:
        # Find or create sub-menus
        while len(menu_structure) > 1:
            menu_name = menu_structure.pop(0)

            # If sub_menu already exists, no need to create a new one
            parent_menu_id = parent_menu_id + '.' + menu_name

            menu_object = unreal_menus.find_menu(parent_menu_id)
            if not menu_object:
                _log('Creating sub-menu {}'.format(parent_menu_id))
                menu_object = parent_menu.add_sub_menu(
                    owner = parent_menu.get_name(), 
                    section_name = '',
                    name = menu_name,
                    label = menu_name
                )
            parent_menu = menu_object

        # Create menu entry that executes the provided callback when clicked
        item_name = menu_structure.pop(0)
        entry = unreal.ToolMenuEntry(
            name=item_name,
            type=unreal.MultiBlockType.MENU_ENTRY,
            insert_position=unreal.ToolMenuInsert('', unreal.ToolMenuInsertType.DEFAULT)
        )
        entry.set_label(item_name)

        # Set the callback function
        if callback:
            _assign_callback(entry, callback)

        # Set the icon, if one provided
        if icon_path is not None:
            style_name, icon_style, small_icon_style = _register_icon_style(icon_path)
            entry.set_icon(style_set_name=style_name, style_name=icon_style, small_style_name=small_icon_style)

        # Set the tooltip, if one provided
        entry.set_tool_tip(tooltip if tooltip is not '' else item_name)
        
        _log('Adding new menu item {}'.format(item_name))
        parent_menu.add_menu_entry(section_name='', args=entry)

    # Refresh the Editor UI
    unreal_menus.refresh_all_widgets()