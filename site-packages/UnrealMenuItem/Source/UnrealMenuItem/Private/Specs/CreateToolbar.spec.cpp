// Python Toolbar Button & Menu Creator. Copyright 2020 Imaginary Spaces. All Rights Reserved.

#include "Misc/AutomationTest.h"
#include "CreateToolbar.h"
#include "SpecOperators.h"

BEGIN_DEFINE_SPEC(CreateToolbarSpec, "Editor.Plugins.UnrealMenuItem.CreateToolbarSpec", EAutomationTestFlags::ProductFilter | EAutomationTestFlags::ApplicationContextMask)
    UToolMenu* Toolbar;
    FString MenuID = TEXT("LevelEditor.LevelEditorToolBar.ImgSpc");
    FString MenuName = TEXT("ImgSpc");
    FString Tooltip = TEXT("Short description");
    FString StyleSet = TEXT("");
    FString IconStyle = TEXT("");
    FString SmallIconStyle = TEXT("");
END_DEFINE_SPEC(CreateToolbarSpec)

void CreateToolbarSpec::Define()
{
    Describe("GenerateToolbarButton", [this]()
    {
        BeforeEach([this]()
        {
            Toolbar = UToolMenus::Get()->FindMenu("LevelEditor.LevelEditorToolBar");
            if (Toolbar->FindSection(*MenuName) != nullptr)
            {
                Toolbar->RemoveSection(*MenuName);
            }
        });

        It("should add a section in the toolbar", [this]()
        {   
            CreateToolbar::GenerateToolbarButton(MenuID, MenuName, Tooltip, StyleSet, IconStyle, SmallIconStyle);
            TEST_NOT_NULL(Toolbar->FindSection(*MenuName));
        });

        It("should add a combo button to the added section using the given menu name", [this]()
        {
            CreateToolbar::GenerateToolbarButton(MenuID, MenuName, Tooltip, StyleSet, IconStyle, SmallIconStyle);
            FToolMenuSection* MenuSection = Toolbar->FindSection(*MenuName);
            TEST_NOT_NULL(MenuSection);
            FToolMenuEntry* ComboButton = MenuSection->FindEntry(*MenuName);
            TEST_NOT_NULL(ComboButton);
            TEST_EQUAL(ComboButton->Type, EMultiBlockType::ToolBarComboButton);
            TEST_EQUAL(ComboButton->Name, FName(*MenuName));
        });
    });
}
