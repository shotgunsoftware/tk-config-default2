// Python Toolbar Button & Menu Creator. Copyright 2020 Imaginary Spaces. All Rights Reserved.

#include "MenuItemIconStyle.h"
#include "Framework/Application/SlateApplication.h"
#include "Styling/SlateStyleRegistry.h"
#include "Slate/SlateGameResources.h"
#include "Interfaces/IPluginManager.h"

TMap<FString, TSharedRef< FSlateStyleSet >> MenuItemIconStyle::RegisteredStyleSets;

void MenuItemIconStyle::Shutdown()
{
    for (const TPair<FString, TSharedRef< FSlateStyleSet >>& StyleSet : RegisteredStyleSets)
    {
        FSlateStyleRegistry::UnRegisterSlateStyle(*StyleSet.Value);
    }
    RegisteredStyleSets.Reset();
}

void MenuItemIconStyle::RegisterIcon(const FString& PluginName, const FString& IconPath)
{
    if (!RegisteredStyleSets.Contains(IconPath))
    {
        TSharedPtr< FSlateStyleSet > Style = Create(PluginName, IconPath);
        if (Style.IsValid())
        {
            FSlateStyleRegistry::RegisterSlateStyle(*Style);
            RegisteredStyleSets.Add(IconPath, Style.ToSharedRef());
        }
    }
}

#define IMAGE_BRUSH( RelativePath, ... ) FSlateImageBrush( Style->RootToContentDir( RelativePath, TEXT(".png") ), __VA_ARGS__ )
const FVector2D Icon40x40(40.0f, 40.0f);
const FVector2D Icon20x20(20.0f, 20.0f);

TSharedRef< FSlateStyleSet > MenuItemIconStyle::Create(const FString& PluginName, const FString& IconPath)
{ 
    // Use icon asset's relative path as style set name to ensure uniqueness within a plugin project 
    TSharedRef< FSlateStyleSet > Style = MakeShareable(new FSlateStyleSet(*IconPath));

    FString Path, Filename, Extension;
    FPaths::Split(IconPath, Path, Filename, Extension);

    FString IconProperty = FString::Printf(TEXT("%s.Icon"), *PluginName);
    FString SmallIconProperty = FString::Printf(TEXT("%s.Small.Icon"), *PluginName);

    Style->SetContentRoot(IPluginManager::Get().FindPlugin(PluginName)->GetBaseDir() / *Path);
    Style->Set(*IconProperty, new IMAGE_BRUSH(*Filename, Icon40x40));
    Style->Set(*SmallIconProperty, new IMAGE_BRUSH(*Filename, Icon20x20));

    return Style;
}

#undef IMAGE_BRUSH
